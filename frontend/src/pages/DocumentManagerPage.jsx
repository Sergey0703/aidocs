// src/pages/DocumentManagerPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import './DocumentManagerPage.css';
import { ragApi } from '../api/ragApi';
import GroupedDocuments from '../components/document-manager/GroupedDocuments';
import UnassignedDocuments from '../components/document-manager/UnassignedDocuments';

const DocumentManagerPage = () => {
  const [groupedDocs, setGroupedDocs] = useState([]);
  const [unassignedDocs, setUnassignedDocs] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      console.log('üì° Fetching documents for Document Manager...');
      const data = await ragApi.getUnassignedAndGroupedDocuments();
      console.log('‚úÖ Documents loaded:', data);
      setGroupedDocs(data.grouped || []);
      setUnassignedDocs(data.unassigned || []);
    } catch (err) {
      console.error('‚ùå Failed to load documents:', err);
      setError("Failed to load documents. Please try again.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç batch endpoint —á–µ—Ä–µ–∑ ragApi
  const handleLinkToVehicle = async (vrn, documentIds) => {
    const group = groupedDocs.find(g => g.vrn === vrn);
    if (!group || !group.vehicleDetails) {
      console.error('‚ùå Vehicle details not found for VRN:', vrn);
      return;
    }

    try {
      console.log('üìé Batch linking documents to vehicle:', { 
        vrn, 
        vehicleId: group.vehicleDetails.id, 
        documentCount: documentIds.length 
      });

      // üÜï –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π batch –º–µ—Ç–æ–¥ (–≤–Ω—É—Ç—Ä–∏ ragApi)
      const result = await ragApi.linkDocumentsToVehicle(group.vehicleDetails.id, documentIds);
      
      console.log('‚úÖ Batch link successful:', result);
      
      // –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
      setGroupedDocs(prev => prev.filter(g => g.vrn !== vrn));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (result.failed_ids && result.failed_ids.length > 0) {
        alert(`Linked ${result.linked_count} documents. ${result.failed_ids.length} failed.`);
      }
    } catch (err) {
      console.error('‚ùå Failed to link documents:', err);
      alert(`Failed to link documents: ${err.message || 'Unknown error'}`);
    }
  };

  // üîÑ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç create-and-link endpoint —á–µ—Ä–µ–∑ ragApi
  const handleCreateAndLink = async (vrn, documentIds, vehicleDetails) => {
    try {
      console.log('üöó Creating vehicle and linking documents:', { 
        vrn, 
        documentCount: documentIds.length,
        vehicleDetails 
      });

      // üÜï –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π create-and-link –º–µ—Ç–æ–¥ (–≤–Ω—É—Ç—Ä–∏ ragApi)
      const result = await ragApi.createVehicleAndLinkDocuments(vrn, documentIds, vehicleDetails);
      
      console.log('‚úÖ Vehicle created and documents linked:', result);
      
      // –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      setGroupedDocs(prev => prev.filter(g => g.vrn !== vrn));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (result.failed_ids && result.failed_ids.length > 0) {
        alert(`Vehicle created! Linked ${result.linked_count} documents. ${result.failed_ids.length} failed.`);
      }
    } catch (err) {
      console.error('‚ùå Failed to create vehicle and link documents:', err);
      alert(`Failed to create vehicle: ${err.message || 'Unknown error'}`);
    }
  };

  // ‚úÖ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô: Manual assign —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const handleManualAssign = async (documentId, vehicleId) => {
    if (!documentId || !vehicleId) {
      console.error('‚ùå Document ID or Vehicle ID missing');
      return;
    }

    try {
      console.log('üìé Manually assigning document to vehicle:', { documentId, vehicleId });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º single link –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      await ragApi.linkDocumentToVehicle(vehicleId, documentId);
      
      console.log('‚úÖ Manual assignment successful');
      
      // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
      setUnassignedDocs(prev => prev.filter(doc => doc.id !== documentId));
    } catch (err) {
      console.error('‚ùå Failed to manually assign document:', err);
      alert(`Failed to assign document: ${err.message || 'Unknown error'}`);
    }
  };

  // ============================================================================
  // RENDER
  // ============================================================================

  if (isLoading) {
    return (
      <div className="loading-state">
        <div className="loading-spinner"></div>
        <p>Loading Document Manager...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error-state">
        <p className="error-message">{error}</p>
        <button className="retry-button" onClick={fetchData}>
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="doc-manager-page">
      {/* LEFT COLUMN - Smart Suggestions (Grouped by VRN) */}
      <div className="manager-column">
        <h2>Smart Suggestions</h2>
        {groupedDocs.length > 0 ? (
          <div className="grouped-list">
            {groupedDocs.map(group => (
              <GroupedDocuments
                key={group.vrn}
                group={group}
                onLink={handleLinkToVehicle}
                onCreateAndLink={handleCreateAndLink}
              />
            ))}
          </div>
        ) : (
          <div className="empty-state">
            <h3>All documents are processed!</h3>
            <p>No new documents with detected vehicle numbers.</p>
          </div>
        )}
      </div>

      {/* RIGHT COLUMN - Unassigned Documents */}
      <div className="manager-column">
        <h2>Unassigned Documents</h2>
        {unassignedDocs.length > 0 ? (
          <UnassignedDocuments 
            documents={unassignedDocs} 
            onAssign={handleManualAssign} 
          />
        ) : (
          <div className="empty-state">
            <h3>Inbox Zero!</h3>
            <p>No documents are waiting for manual assignment.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default DocumentManagerPage;