#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OCR Debug Test Script
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import sys
from pathlib import Path

# OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import pytesseract
    from PIL import Image, ImageEnhance, ImageFilter
    import cv2
    import numpy as np
    print("‚úÖ –í—Å–µ OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def check_tesseract_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tesseract"""
    try:
        version = pytesseract.get_tesseract_version()
        print(f"‚úÖ Tesseract –≤–µ—Ä—Å–∏—è: {version}")
        
        languages = pytesseract.get_languages()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {languages}")
        
        if 'eng' in languages:
            print("‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            print("‚ö†Ô∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Tesseract: {e}")
        return False


def simple_ocr_test(image_path):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OCR –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        print(f"\n=== –ü–†–û–°–¢–û–ô OCR –¢–ï–°–¢ ===")
        print(f"–§–∞–π–ª: {image_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        if not os.path.exists(image_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return None
            
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(image_path)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: {image.size}, —Ä–µ–∂–∏–º: {image.mode}")
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = pytesseract.image_to_string(image, lang='eng')
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 40)
        print(text[:500] + "..." if len(text) > 500 else text)
        print("-" * 40)
        
        return text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ OCR: {e}")
        return None


def advanced_ocr_test(image_path):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç OCR —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        print(f"\n=== –ü–†–û–î–í–ò–ù–£–¢–´–ô OCR –¢–ï–°–¢ ===")
        print(f"–§–∞–π–ª: {image_path}")
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(image_path)
        print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.size}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ RGB")
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        width, height = image.size
        if width < 1000 or height < 1000:
            scale_factor = max(1000/width, 1000/height)
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
            image = image.resize((new_width, new_height), Image.LANCZOS)
            print(f"‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–æ –¥–æ: {new_width}x{new_height}")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.5)
        print(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞—Å—Ç —É–ª—É—á—à–µ–Ω")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(2.0)
        print(f"‚úÖ –†–µ–∑–∫–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        image = image.convert('L')
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        image = image.filter(ImageFilter.MedianFilter(size=3))
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω")
        
        # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OCR (–±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        safe_config = r'--oem 3 --psm 6'
        
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {safe_config}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = pytesseract.image_to_string(image, lang='eng', config=safe_config)
        
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 40)
        print(text[:500] + "..." if len(text) > 500 else text)
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        if text.strip():
            letters = sum(c.isalpha() for c in text)
            total_chars = len(text.replace(' ', '').replace('\n', ''))
            quality_score = letters / total_chars if total_chars > 0 else 0
            
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:")
            print(f"   –ë—É–∫–≤—ã: {letters}")
            print(f"   –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
            
            if quality_score > 0.3:
                print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ")
            else:
                print(f"‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∑–∫–æ–µ")
        else:
            print(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
        
        return text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ OCR: {e}")
        return None


def test_opencv_processing(image_path):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å OpenCV"""
    try:
        print(f"\n=== OPENCV –û–ë–†–ê–ë–û–¢–ö–ê ===")
        
        # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å OpenCV
        img = cv2.imread(image_path)
        if img is None:
            print(f"‚ùå OpenCV –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
            return None
            
        print(f"‚úÖ OpenCV –ø—Ä–æ—á–∏—Ç–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img.shape}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–µ—Ä—ã–π")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
        blur = cv2.GaussianBlur(gray, (5, 5), 0)
        print(f"‚úÖ –†–∞–∑–º—ã—Ç–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        print(f"‚úÖ –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL –¥–ª—è OCR
        pil_image = Image.fromarray(thresh)
        
        # OCR —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        text = pytesseract.image_to_string(pil_image, lang='eng', config=r'--oem 3 --psm 6')
        
        print(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ OpenCV –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 40)
        print(text[:500] + "..." if len(text) > 500 else text)
        print("-" * 40)
        
        return text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenCV –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return None


def test_different_configs(image_path):
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π OCR"""
    try:
        print(f"\n=== –¢–ï–°–¢ –†–ê–ó–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ===")
        
        image = Image.open(image_path)
        if image.mode != 'L':
            image = image.convert('L')
        
        configs = [
            ('–ë–∞–∑–æ–≤–∞—è', ''),
            ('OEM 3 PSM 6', '--oem 3 --psm 6'),
            ('OEM 3 PSM 7', '--oem 3 --psm 7'),
            ('OEM 3 PSM 8', '--oem 3 --psm 8'),
            ('OEM 1 PSM 6', '--oem 1 --psm 6'),
        ]
        
        results = []
        
        for name, config in configs:
            try:
                print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name} ({config})")
                text = pytesseract.image_to_string(image, lang='eng', config=config)
                
                if text.strip():
                    letters = sum(c.isalpha() for c in text)
                    total = len(text.replace(' ', '').replace('\n', ''))
                    quality = letters / total if total > 0 else 0
                    
                    print(f"   –î–ª–∏–Ω–∞: {len(text)}, –ö–∞—á–µ—Å—Ç–≤–æ: {quality:.2f}")
                    print(f"   –ü—Ä–µ–≤—å—é: {text[:100]}...")
                    
                    results.append((name, len(text), quality, text))
                else:
                    print(f"   ‚ùå –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
                    results.append((name, 0, 0, ""))
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                results.append((name, 0, 0, ""))
        
        # –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if results:
            best = max(results, key=lambda x: x[2])  # –ü–æ –∫–∞—á–µ—Å—Ç–≤—É
            print(f"\nüèÜ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {best[0]}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {best[2]:.2f}")
            print(f"   –î–ª–∏–Ω–∞: {best[1]}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
        return []


def find_test_images(directory="./data/634/2025"):
    """–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.gif']
    images = []
    
    try:
        for root, dirs, files in os.walk(directory):
            for file in files:
                if any(file.lower().endswith(ext) for ext in image_extensions):
                    images.append(os.path.join(root, file))
                    if len(images) >= 5:  # –ú–∞–∫—Å–∏–º—É–º 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
                        break
            if len(images) >= 5:
                break
                
        return images
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return []


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç OCR DEBUG TEST SCRIPT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract
    if not check_tesseract_installation():
        return
    
    # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    test_images = find_test_images()
    
    if not test_images:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—É—Ç–∏
        manual_path = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ (–∏–ª–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        if manual_path and os.path.exists(manual_path):
            test_images = [manual_path]
        else:
            print("‚ùå –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_image = test_images[0]
    print(f"\nüñºÔ∏è –¢–ï–°–¢–ò–†–£–ï–ú: {os.path.basename(test_image)}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    simple_ocr_test(test_image)
    advanced_ocr_test(test_image)
    test_opencv_processing(test_image)
    test_different_configs(test_image)
    
    print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if len(test_images) > 1:
        print(f"\nüìã –î—Ä—É–≥–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        for i, img in enumerate(test_images[1:], 2):
            print(f"   {i}. {os.path.basename(img)}")
        
        test_more = input(f"\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        if test_more.isdigit():
            idx = int(test_more) - 1
            if 0 <= idx < len(test_images):
                main_test_image = test_images[idx]
                print(f"\nüñºÔ∏è –¢–ï–°–¢–ò–†–£–ï–ú: {os.path.basename(main_test_image)}")
                simple_ocr_test(main_test_image)
                advanced_ocr_test(main_test_image)


if __name__ == "__main__":
    main()
