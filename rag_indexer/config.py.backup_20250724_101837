#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Configuration module for RAG Document Indexer
Handles environment variables, validation, and default settings
Added support for advanced document parsing and OCR improvements
"""

import os
from dotenv import load_dotenv


class Config:
    """Enhanced configuration class with advanced document processing settings"""
    
    def __init__(self):
        """Initialize configuration by loading environment variables"""
        load_dotenv()
        self._load_settings()
        self._validate_settings()
    
    def _load_settings(self):
        """Load all settings from environment variables with defaults"""
        
        # --- DIRECTORY AND FILE SETTINGS ---
        self.DOCUMENTS_DIR = os.getenv("DOCUMENTS_DIR", "./data/634/2025")
        self.ERROR_LOG_FILE = "./indexing_errors.log"
        
        # --- DATABASE SETTINGS ---
        self.CONNECTION_STRING = os.getenv("SUPABASE_CONNECTION_STRING")
        self.TABLE_NAME = os.getenv("TABLE_NAME", "documents")
        
        # --- EMBEDDING SETTINGS ---
        self.EMBED_MODEL = os.getenv("EMBED_MODEL", "nomic-embed-text")
        self.EMBED_DIM = int(os.getenv("EMBED_DIM", "768"))
        self.OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
        
        # --- TEXT PROCESSING SETTINGS ---
        self.CHUNK_SIZE = int(os.getenv("CHUNK_SIZE", "512"))
        self.CHUNK_OVERLAP = int(os.getenv("CHUNK_OVERLAP", "128"))
        self.MIN_CHUNK_LENGTH = int(os.getenv("MIN_CHUNK_LENGTH", "50"))
        
        # --- BATCH PROCESSING SETTINGS ---
        self.PROCESSING_BATCH_SIZE = int(os.getenv("PROCESSING_BATCH_SIZE", "50"))
        self.EMBEDDING_BATCH_SIZE = int(os.getenv("BATCH_SIZE", "5"))
        self.DB_BATCH_SIZE = int(os.getenv("DB_BATCH_SIZE", "200"))
        self.NUM_WORKERS = int(os.getenv("NUM_WORKERS", "4"))
        
        # --- ENHANCED OCR SETTINGS ---
        self.ENABLE_OCR = os.getenv("ENABLE_OCR", "true").lower() == "true"
        self.OCR_BATCH_SIZE = int(os.getenv("OCR_BATCH_SIZE", "10"))
        self.OCR_WORKERS = int(os.getenv("OCR_WORKERS", "4"))
        self.OCR_QUALITY_THRESHOLD = float(os.getenv("OCR_QUALITY_THRESHOLD", "0.3"))
        
        # --- NEW: OCR ROTATION DETECTION ---
        self.OCR_AUTO_ROTATION = os.getenv("OCR_AUTO_ROTATION", "true").lower() == "true"
        self.OCR_ROTATION_QUALITY_THRESHOLD = float(os.getenv("OCR_ROTATION_QUALITY_THRESHOLD", "0.1"))
        self.OCR_TEST_ALL_ROTATIONS = os.getenv("OCR_TEST_ALL_ROTATIONS", "false").lower() == "true"
        self.OCR_ROTATION_TIMEOUT = int(os.getenv("OCR_ROTATION_TIMEOUT", "30"))
        self.OCR_SKIP_ROTATION_FOR_GOOD_QUALITY = os.getenv("OCR_SKIP_ROTATION_FOR_GOOD_QUALITY", "true").lower() == "true"
        
        # --- NEW: TEXT QUALITY ANALYSIS ---
        self.ENABLE_TEXT_QUALITY_ANALYSIS = os.getenv("ENABLE_TEXT_QUALITY_ANALYSIS", "false").lower() == "false"
        self.TEXT_QUALITY_MIN_SCORE = float(os.getenv("TEXT_QUALITY_MIN_SCORE", "0.3"))
        self.TEXT_QUALITY_MIN_WORDS = int(os.getenv("TEXT_QUALITY_MIN_WORDS", "5"))
        self.TEXT_QUALITY_MAX_IDENTICAL_CHARS = int(os.getenv("TEXT_QUALITY_MAX_IDENTICAL_CHARS", "10"))
        self.TEXT_QUALITY_LANGUAGE = os.getenv("TEXT_QUALITY_LANGUAGE", "english")  # english, russian, auto
        
        # --- NEW: ADVANCED DOCUMENT PARSING ---
        self.ENABLE_ADVANCED_DOC_PARSING = os.getenv("ENABLE_ADVANCED_DOC_PARSING", "true").lower() == "true"
        self.EXTRACT_IMAGES_FROM_DOCS = os.getenv("EXTRACT_IMAGES_FROM_DOCS", "true").lower() == "true"
        self.PRESERVE_DOC_STRUCTURE = os.getenv("PRESERVE_DOC_STRUCTURE", "true").lower() == "true"
        self.DOC_EXTRACT_TABLES = os.getenv("DOC_EXTRACT_TABLES", "true").lower() == "true"
        self.DOC_EXTRACT_HEADERS = os.getenv("DOC_EXTRACT_HEADERS", "true").lower() == "true"
        
        # --- NEW: HYBRID PROCESSING SETTINGS ---
        self.HYBRID_TEXT_IMAGE_PROCESSING = os.getenv("HYBRID_TEXT_IMAGE_PROCESSING", "true").lower() == "true"
        self.COMBINE_TEXT_AND_OCR_RESULTS = os.getenv("COMBINE_TEXT_AND_OCR_RESULTS", "true").lower() == "true"
        self.IMAGE_EXTRACTION_QUALITY = os.getenv("IMAGE_EXTRACTION_QUALITY", "high")  # low, medium, high
        
        # --- PERFORMANCE SETTINGS ---
        self.OLLAMA_TIMEOUT = int(os.getenv("OLLAMA_TIMEOUT", "300"))
        self.MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB
        self.SKIP_VALIDATION = os.getenv("SKIP_VALIDATION", "false").lower() == "true"
        
        # --- NEW: CPU OPTIMIZATION SETTINGS ---
        self.OLLAMA_NUM_THREAD = int(os.getenv("OLLAMA_NUM_THREAD", "16"))
        self.OLLAMA_NUMA = os.getenv("OLLAMA_NUMA", "false").lower() == "true"
        self.OLLAMA_KEEP_ALIVE = os.getenv("OLLAMA_KEEP_ALIVE", "60s")
        self.OLLAMA_MAX_LOADED_MODELS = int(os.getenv("OLLAMA_MAX_LOADED_MODELS", "1"))
        
        # --- NEW: MONITORING AND LOGGING ---
        self.ENABLE_PROGRESS_LOGGING = os.getenv("ENABLE_PROGRESS_LOGGING", "true").lower() == "true"
        self.LOG_BATCH_TIMING = os.getenv("LOG_BATCH_TIMING", "true").lower() == "true"
        self.LOG_OCR_ROTATION_ATTEMPTS = os.getenv("LOG_OCR_ROTATION_ATTEMPTS", "false").lower() == "true"
        self.LOG_TEXT_QUALITY_SCORES = os.getenv("LOG_TEXT_QUALITY_SCORES", "false").lower() == "true"
        # --- DOCUMENT CONVERSION SETTINGS ---
        self.AUTO_CONVERT_DOC = os.getenv("AUTO_CONVERT_DOC", "true").lower() == "true"
        self.BACKUP_ORIGINAL_DOC = os.getenv("BACKUP_ORIGINAL_DOC", "true").lower() == "true"
        self.DELETE_ORIGINAL_DOC = os.getenv("DELETE_ORIGINAL_DOC", "false").lower() == "true"
    
    def _validate_settings(self):
        """Validate configuration settings and raise errors for critical issues"""
        
        # Critical validations
        if not self.CONNECTION_STRING:
            raise ValueError("SUPABASE_CONNECTION_STRING not found in .env file!")
        
        if not os.path.exists(self.DOCUMENTS_DIR):
            raise ValueError(f"Documents directory does not exist: {self.DOCUMENTS_DIR}")
        
        # Validate numeric ranges
        if self.CHUNK_SIZE < 100:
            raise ValueError("CHUNK_SIZE must be at least 100")
        
        if self.CHUNK_OVERLAP >= self.CHUNK_SIZE:
            raise ValueError("CHUNK_OVERLAP must be less than CHUNK_SIZE")
        
        if self.EMBED_DIM not in [384, 512, 768, 1024, 1536]:
            print(f"WARNING: Unusual embedding dimension: {self.EMBED_DIM}")
        
        if self.PROCESSING_BATCH_SIZE < 1:
            raise ValueError("PROCESSING_BATCH_SIZE must be at least 1")
        
        if self.EMBEDDING_BATCH_SIZE < 1:
            raise ValueError("EMBEDDING_BATCH_SIZE must be at least 1")
        
        if self.DB_BATCH_SIZE < 1:
            raise ValueError("DB_BATCH_SIZE must be at least 1")
        
        # NEW: Validate OCR rotation settings
        if self.OCR_ROTATION_QUALITY_THRESHOLD < 0 or self.OCR_ROTATION_QUALITY_THRESHOLD > 1:
            raise ValueError("OCR_ROTATION_QUALITY_THRESHOLD must be between 0 and 1")
        
        if self.OCR_ROTATION_TIMEOUT < 10:
            print("WARNING: OCR_ROTATION_TIMEOUT is very low, may cause timeouts")
        
        # NEW: Validate text quality settings
        if self.TEXT_QUALITY_MIN_SCORE < 0 or self.TEXT_QUALITY_MIN_SCORE > 1:
            raise ValueError("TEXT_QUALITY_MIN_SCORE must be between 0 and 1")
        
        if self.TEXT_QUALITY_LANGUAGE not in ["english", "russian", "auto"]:
            print(f"WARNING: Unsupported TEXT_QUALITY_LANGUAGE: {self.TEXT_QUALITY_LANGUAGE}")
        
        # NEW: Validate image extraction quality
        if self.IMAGE_EXTRACTION_QUALITY not in ["low", "medium", "high"]:
            print(f"WARNING: Invalid IMAGE_EXTRACTION_QUALITY: {self.IMAGE_EXTRACTION_QUALITY}, using 'high'")
            self.IMAGE_EXTRACTION_QUALITY = "high"
    
    def print_config(self):
        """Print current configuration in a readable format"""
        print("=== ENHANCED RAG INDEXER CONFIGURATION ===")
        print(f"Documents directory: {self.DOCUMENTS_DIR}")
        print(f"Embedding model: {self.EMBED_MODEL} (CPU-optimized)")
        print(f"Chunk size: {self.CHUNK_SIZE}, Overlap: {self.CHUNK_OVERLAP}")
        print(f"Vector dimension: {self.EMBED_DIM}")
        print(f"Batch processing: {self.PROCESSING_BATCH_SIZE} chunks per batch")
        print(f"Enhanced features:")
        print(f"  - Advanced document parsing: {'?' if self.ENABLE_ADVANCED_DOC_PARSING else '?'}")
        print(f"  - OCR auto-rotation: {'?' if self.OCR_AUTO_ROTATION else '?'}")
        print(f"  - Text quality analysis: {'?' if self.ENABLE_TEXT_QUALITY_ANALYSIS else '?'}")
        print(f"  - Hybrid text+image processing: {'?' if self.HYBRID_TEXT_IMAGE_PROCESSING else '?'}")
        print(f"  - Extract images from docs: {'?' if self.EXTRACT_IMAGES_FROM_DOCS else '?'}")
        print(f"  - Structure preservation: {'?' if self.PRESERVE_DOC_STRUCTURE else '?'}")
        print(f"CPU optimization: {self.OLLAMA_NUM_THREAD} threads, NUMA {'enabled' if self.OLLAMA_NUMA else 'disabled'}")
        print("=" * 60)
    
    def get_batch_settings(self):
        """Return batch processing settings as a dictionary"""
        return {
            'processing_batch_size': self.PROCESSING_BATCH_SIZE,
            'embedding_batch_size': self.EMBEDDING_BATCH_SIZE,
            'db_batch_size': self.DB_BATCH_SIZE,
            'num_workers': self.NUM_WORKERS
        }
    
    def get_chunk_settings(self):
        """Return text chunking settings as a dictionary"""
        return {
            'chunk_size': self.CHUNK_SIZE,
            'chunk_overlap': self.CHUNK_OVERLAP,
            'min_chunk_length': self.MIN_CHUNK_LENGTH
        }
    
    def get_embedding_settings(self):
        """Return embedding settings as a dictionary"""
        return {
            'model': self.EMBED_MODEL,
            'dimension': self.EMBED_DIM,
            'base_url': self.OLLAMA_BASE_URL,
            'timeout': self.OLLAMA_TIMEOUT,
            'num_thread': self.OLLAMA_NUM_THREAD,
            'numa': self.OLLAMA_NUMA,
            'keep_alive': self.OLLAMA_KEEP_ALIVE
        }
    
    def get_ocr_settings(self):
        """Return enhanced OCR settings as a dictionary"""
        return {
            'enabled': self.ENABLE_OCR,
            'batch_size': self.OCR_BATCH_SIZE,
            'workers': self.OCR_WORKERS,
            'quality_threshold': self.OCR_QUALITY_THRESHOLD,
            'auto_rotation': self.OCR_AUTO_ROTATION,
            'rotation_quality_threshold': self.OCR_ROTATION_QUALITY_THRESHOLD,
            'test_all_rotations': self.OCR_TEST_ALL_ROTATIONS,
            'rotation_timeout': self.OCR_ROTATION_TIMEOUT,
            'skip_rotation_for_good_quality': self.OCR_SKIP_ROTATION_FOR_GOOD_QUALITY
        }
    
    def get_text_quality_settings(self):
        """Return text quality analysis settings as a dictionary"""
        return {
            'enabled': self.ENABLE_TEXT_QUALITY_ANALYSIS,
            'min_score': self.TEXT_QUALITY_MIN_SCORE,
            'min_words': self.TEXT_QUALITY_MIN_WORDS,
            'max_identical_chars': self.TEXT_QUALITY_MAX_IDENTICAL_CHARS,
            'language': self.TEXT_QUALITY_LANGUAGE
        }
    
    def get_document_parsing_settings(self):
        """Return advanced document parsing settings as a dictionary"""
        return {
            'advanced_parsing_enabled': self.ENABLE_ADVANCED_DOC_PARSING,
            'extract_images': self.EXTRACT_IMAGES_FROM_DOCS,
            'preserve_structure': self.PRESERVE_DOC_STRUCTURE,
            'extract_tables': self.DOC_EXTRACT_TABLES,
            'extract_headers': self.DOC_EXTRACT_HEADERS,
            'hybrid_processing': self.HYBRID_TEXT_IMAGE_PROCESSING,
            'combine_results': self.COMBINE_TEXT_AND_OCR_RESULTS,
            'image_quality': self.IMAGE_EXTRACTION_QUALITY
        }
    
    def get_performance_settings(self):
        """Return performance optimization settings as a dictionary"""
        return {
            'max_file_size': self.MAX_FILE_SIZE,
            'skip_validation': self.SKIP_VALIDATION,
            'ollama_timeout': self.OLLAMA_TIMEOUT,
            'num_workers': self.NUM_WORKERS,
            'cpu_threads': self.OLLAMA_NUM_THREAD,
            'numa_enabled': self.OLLAMA_NUMA,
            'keep_alive': self.OLLAMA_KEEP_ALIVE,
            'max_loaded_models': self.OLLAMA_MAX_LOADED_MODELS
        }
    
    def get_logging_settings(self):
        """Return logging and monitoring settings as a dictionary"""
        return {
            'progress_logging': self.ENABLE_PROGRESS_LOGGING,
            'batch_timing': self.LOG_BATCH_TIMING,
            'ocr_rotation_attempts': self.LOG_OCR_ROTATION_ATTEMPTS,
            'text_quality_scores': self.LOG_TEXT_QUALITY_SCORES
        }
    
    def is_feature_enabled(self, feature_name):
        """
        Check if a specific feature is enabled
        
        Args:
            feature_name: Name of the feature to check
        
        Returns:
            bool: True if feature is enabled
        """
        feature_map = {
            'ocr': self.ENABLE_OCR,
            'advanced_doc_parsing': self.ENABLE_ADVANCED_DOC_PARSING,
            'auto_rotation': self.OCR_AUTO_ROTATION,
            'text_quality_analysis': self.ENABLE_TEXT_QUALITY_ANALYSIS,
            'hybrid_processing': self.HYBRID_TEXT_IMAGE_PROCESSING,
            'image_extraction': self.EXTRACT_IMAGES_FROM_DOCS,
            'structure_preservation': self.PRESERVE_DOC_STRUCTURE,
            'progress_logging': self.ENABLE_PROGRESS_LOGGING
        }
        
        return feature_map.get(feature_name, False)


# Global configuration instance
config = Config()


def get_config():
    """Get the global configuration instance"""
    return config


def reload_config():
    """Reload configuration from environment variables"""
    global config
    config = Config()
    return config


def print_feature_status():
    """Print status of all enhanced features"""
    config = get_config()
    
    print("\n=== ENHANCED FEATURES STATUS ===")
    features = [
        ("Advanced Document Parsing", config.is_feature_enabled('advanced_doc_parsing')),
        ("OCR Processing", config.is_feature_enabled('ocr')),
        ("OCR Auto-Rotation", config.is_feature_enabled('auto_rotation')),
        ("Text Quality Analysis", config.is_feature_enabled('text_quality_analysis')),
        ("Hybrid Text+Image Processing", config.is_feature_enabled('hybrid_processing')),
        ("Image Extraction from Docs", config.is_feature_enabled('image_extraction')),
        ("Document Structure Preservation", config.is_feature_enabled('structure_preservation')),
        ("Progress Logging", config.is_feature_enabled('progress_logging')),
    ]
    
    for feature_name, enabled in features:
        status = "? ENABLED" if enabled else "? DISABLED"
        print(f"  {feature_name:<35}: {status}")
    
    print("=" * 50)