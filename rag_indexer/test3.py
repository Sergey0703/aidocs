#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫ –ø—É—Ç–∏
sys.path.append('.')

def test_pdf_libraries():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ PDF"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ PDF:")
    
    libraries = {
        'PyMuPDF': False,
        'pdfplumber': False,
        'pdf2image': False
    }
    
    try:
        import fitz
        libraries['PyMuPDF'] = True
        print("  ‚úÖ PyMuPDF –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå PyMuPDF –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyMuPDF")
    
    try:
        import pdfplumber
        libraries['pdfplumber'] = True
        print("  ‚úÖ pdfplumber –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå pdfplumber –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdfplumber")
    
    try:
        from pdf2image import convert_from_path
        libraries['pdf2image'] = True
        print("  ‚úÖ pdf2image –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("  ‚ùå pdf2image –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pdf2image")
    
    return libraries

def test_config_loading():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PDF"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PDF:")
    
    try:
        from config import get_config
        config = get_config()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF –Ω–∞—Å—Ç—Ä–æ–µ–∫
        pdf_enabled = config.is_feature_enabled('enhanced_pdf_processing')
        print(f"  Enhanced PDF processing: {'‚úÖ ENABLED' if pdf_enabled else '‚ùå DISABLED'}")
        
        if pdf_enabled:
            pdf_settings = config.get_pdf_processing_settings()
            print(f"  PDF chunk size: {pdf_settings['chunk_size']}")
            print(f"  Auto method selection: {'‚úÖ' if pdf_settings['auto_method_selection'] else '‚ùå'}")
            print(f"  Table extraction: {'‚úÖ' if pdf_settings['enable_table_extraction'] else '‚ùå'}")
            print(f"  OCR fallback: {'‚úÖ' if pdf_settings['enable_ocr_fallback'] else '‚ùå'}")
        
        return config
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def test_pdf_processor():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:")
    
    try:
        from document_parsers import EnhancedPDFProcessor
        from config import get_config
        
        config = get_config()
        pdf_processor = EnhancedPDFProcessor(config)
        
        print("  ‚úÖ EnhancedPDFProcessor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        libs = pdf_processor.libraries_available
        print(f"  PyMuPDF –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {'‚úÖ' if libs['pymupdf'] else '‚ùå'}")
        print(f"  pdfplumber –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {'‚úÖ' if libs['pdfplumber'] else '‚ùå'}")
        print(f"  pdf2image –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {'‚úÖ' if libs['pdf2image'] else '‚ùå'}")
        
        return pdf_processor
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return None

def find_test_pdf():
    """–ù–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª"""
    print("\nüìÑ –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF:")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_dirs = [
        "./data/634/2025/1",
        "./data/634/2025",
        "./data",
        "."
    ]
    
    for test_dir in test_dirs:
        if os.path.exists(test_dir):
            for root, dirs, files in os.walk(test_dir):
                for file in files:
                    if file.lower().endswith('.pdf'):
                        pdf_path = os.path.join(root, file)
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω PDF: {pdf_path}")
                        return pdf_path
    
    print("  ‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return None

def test_pdf_processing(pdf_processor, pdf_file):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {os.path.basename(pdf_file)}")
    
    try:
        # –ê–Ω–∞–ª–∏–∑ PDF
        pdf_analysis = pdf_processor.detect_pdf_type(pdf_file)
        print(f"  PDF —Ç–∏–ø: {pdf_analysis['type']}")
        print(f"  –°—Ç—Ä–∞–Ω–∏—Ü: {pdf_analysis['page_count']}")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥: {pdf_analysis['recommended_method']}")
        print(f"  –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {pdf_analysis['text_coverage']:.2f}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
        documents = pdf_processor.process_pdf_file(pdf_file)
        
        if documents:
            doc = documents[0]
            content_length = len(doc.text)
            extraction_method = doc.metadata.get('extraction_info', {}).get('method', 'unknown')
            
            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {content_length:,}")
            print(f"  –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_method}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            preview = doc.text[:200].replace('\n', ' ')
            print(f"  –ü—Ä–µ–≤—å—é: \"{preview}...\"")
            
            return True
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üîß –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û PDF –ü–†–û–¶–ï–°–°–û–†–ê")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    libraries = test_pdf_libraries()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = test_config_loading()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    pdf_processor = test_pdf_processor()
    
    # 4. –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
    pdf_file = find_test_pdf()
    
    # 5. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if pdf_processor and pdf_file:
        success = test_pdf_processing(pdf_processor, pdf_file)
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        if success:
            print("  ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ö–û–†–†–ï–ö–¢–ù–û!")
        else:
            print("  ‚ùå –£–ª—É—á—à–µ–Ω–Ω—ã–π PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ó–ê–í–ï–†–®–ï–ù:")
        if not pdf_processor:
            print("  - PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
        if not pdf_file:
            print("  - –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not all(libraries.values()):
        print("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ PDF")
    if not config or not config.is_feature_enabled('enhanced_pdf_processing'):
        print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PDF –≤ .env —Ñ–∞–π–ª–µ")
    if not pdf_file:
        print("  - –î–æ–±–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
