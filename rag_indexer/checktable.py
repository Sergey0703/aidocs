#!/usr/bin/env python3
"""
??????????????? ?????? ??? ???????? ??????? ????????
?????? ?????? ??????????, ?????? ?? ????????
"""

import os
import psycopg2
from dotenv import load_dotenv
from datetime import datetime

def diagnose_database():
    load_dotenv()
    
    connection_string = os.getenv("SUPABASE_CONNECTION_STRING")
    embed_dim = int(os.getenv("EMBED_DIM", "1024"))
    
    if not connection_string:
        print("? SUPABASE_CONNECTION_STRING ?? ?????? ? .env ?????!")
        return
    
    print("=== ??????????? ????????? ???? ?????? ===")
    print(f"?????: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"????????? ???????????: {embed_dim}D")
    print("=" * 50)
    
    try:
        # ???????????
        print("?? ??????????? ? ???? ??????...")
        conn = psycopg2.connect(connection_string)
        cur = conn.cursor()
        print("? ??????????? ???????")
        
        # 1. ???????? ?????? PostgreSQL
        print("\n?? ?????????? ? ???? ??????")
        cur.execute("SELECT version();")
        version = cur.fetchone()[0]
        print(f"PostgreSQL ??????: {version}")
        
        # 2. ???????? ??????????
        print("\n?? ??????????")
        cur.execute("SELECT extname, extversion FROM pg_extension WHERE extname IN ('vector', 'uuid-ossp');")
        extensions = cur.fetchall()
        for name, version in extensions:
            print(f"? {name}: {version}")
        
        if not any(name == 'vector' for name, version in extensions):
            print("? ?????????? 'vector' ?? ???????????!")
        
        # 3. ???????? ????? vecs
        print("\n?? ?????")
        cur.execute("SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'vecs';")
        vecs_schema = cur.fetchone()
        if vecs_schema:
            print("? ????? 'vecs' ??????????")
        else:
            print("? ????? 'vecs' ?? ??????????!")
            return
        
        # 4. ???????? ?????? ? ????? vecs
        print("\n?? ??????? ? ????? VECS")
        cur.execute("""
            SELECT table_name, table_type 
            FROM information_schema.tables 
            WHERE table_schema = 'vecs'
            ORDER BY table_name;
        """)
        tables = cur.fetchall()
        
        if not tables:
            print("? ??????? ? ????? 'vecs' ?? ???????!")
            return
        
        for table_name, table_type in tables:
            print(f"?? {table_name} ({table_type})")
        
        # 5. ????????? ???????? ??????? documents
        if any(table == 'documents' for table, _ in tables):
            print("\n?? ????????? ??????? vecs.documents")
            
            # ????????? ???????
            cur.execute("""
                SELECT 
                    column_name, 
                    data_type, 
                    is_nullable,
                    column_default
                FROM information_schema.columns 
                WHERE table_schema = 'vecs' AND table_name = 'documents'
                ORDER BY ordinal_position;
            """)
            columns = cur.fetchall()
            
            print("???????:")
            for col_name, data_type, nullable, default in columns:
                null_info = "NULL" if nullable == "YES" else "NOT NULL"
                default_info = f" DEFAULT {default}" if default else ""
                print(f"   {col_name}: {data_type} {null_info}{default_info}")
            
            # ???????? ??????
            print("\n?? ?????? ? ???????")
            cur.execute("SELECT COUNT(*) FROM vecs.documents;")
            total_count = cur.fetchone()[0]
            print(f"????? ???????: {total_count}")
            
            if total_count > 0:
                # ???????? ???????????? ????????
                print("\n?? ??????????? ????????")
                try:
                    cur.execute("""
                        SELECT 
                            array_length(embedding, 1) as dimension,
                            COUNT(*) as count,
                            ROUND(COUNT(*) * 100.0 / %s, 2) as percentage
                        FROM vecs.documents 
                        WHERE embedding IS NOT NULL
                        GROUP BY array_length(embedding, 1)
                        ORDER BY count DESC;
                    """, (total_count,))
                    
                    dimensions = cur.fetchall()
                    
                    if dimensions:
                        print("????????? ???????????:")
                        for dim, count, percentage in dimensions:
                            status = "?" if dim == embed_dim else "??"
                            print(f"   {status} {dim}D: {count} ??????? ({percentage}%)")
                    else:
                        print("? ??????? ?? ??????? (??? embedding = NULL)")
                        
                except Exception as e:
                    print(f"? ?????? ??????? ????????: {e}")
                
                # ???????? ??????????
                print("\n?? ??????????")
                try:
                    cur.execute("""
                        SELECT 
                            jsonb_object_keys(metadata) as key,
                            COUNT(*) as count
                        FROM vecs.documents 
                        WHERE metadata IS NOT NULL
                        GROUP BY jsonb_object_keys(metadata)
                        ORDER BY count DESC
                        LIMIT 10;
                    """)
                    metadata_keys = cur.fetchall()
                    
                    if metadata_keys:
                        print("????? ?????????? (??? 10):")
                        for key, count in metadata_keys:
                            print(f"   {key}: {count} ???????")
                    else:
                        print("? ?????????? ?? ???????")
                        
                except Exception as e:
                    print(f"? ?????? ??????? ??????????: {e}")
                
                # ???????? ??????
                print("\n?? ????? ? ???????")
                try:
                    cur.execute("""
                        SELECT 
                            metadata->>'file_name' as file_name,
                            COUNT(*) as chunks
                        FROM vecs.documents 
                        WHERE metadata->>'file_name' IS NOT NULL
                        GROUP BY metadata->>'file_name'
                        ORDER BY chunks DESC
                        LIMIT 5;
                    """)
                    files = cur.fetchall()
                    
                    if files:
                        print("????? ? ?????????? ??????????? ??????:")
                        for file_name, chunks in files:
                            # ???????? ??????? ????? ??????
                            display_name = file_name[:50] + "..." if len(file_name) > 50 else file_name
                            print(f"   {display_name}: {chunks} ??????")
                    else:
                        print("? ?????????? ? ?????? ?? ???????")
                        
                except Exception as e:
                    print(f"? ?????? ??????? ??????: {e}")
                
                # ???????? ????????
                print("\n?? ???????")
                cur.execute("""
                    SELECT 
                        indexname,
                        indexdef
                    FROM pg_indexes 
                    WHERE tablename = 'documents' AND schemaname = 'vecs'
                    ORDER BY indexname;
                """)
                indexes = cur.fetchall()
                
                if indexes:
                    print("???????????? ???????:")
                    for idx_name, idx_def in indexes:
                        print(f"   {idx_name}")
                        if "vector" in idx_def.lower():
                            print("      ?? ????????? ??????")
                        elif "gin" in idx_def.lower():
                            print("      ?? GIN ?????? (??????????)")
                else:
                    print("? ??????? ?? ???????")
                
            else:
                print("?? ??????? ??????")
        else:
            print("? ??????? 'documents' ?? ??????? ? ????? 'vecs'!")
        
        # 6. ?????? ???? ??????
        print("\n?? ???????")
        cur.execute("""
            SELECT 
                pg_size_pretty(pg_total_relation_size('vecs.documents')) as table_size,
                pg_size_pretty(pg_database_size(current_database())) as db_size;
        """)
        sizes = cur.fetchone()
        if sizes:
            print(f"?????? ??????? vecs.documents: {sizes[0]}")
            print(f"?????? ???? ???? ??????: {sizes[1]}")
        
        cur.close()
        conn.close()
        
        print("\n" + "=" * 50)
        print("?? ??????????")
        
        if total_count == 0:
            print("? ??????? ?????? - ????? ????????? ??????????? ??? ?????? ???????????")
        elif any(dim == embed_dim for dim, _, _ in dimensions):
            print(f"? ??????? ??? ???????????? {embed_dim}D ???????")
        else:
            print(f"??  ??????? ?? ???????????? {embed_dim}D ??????? - ????????? ????????????")
            
    except psycopg2.Error as e:
        print(f"? ?????? PostgreSQL: {e}")
    except Exception as e:
        print(f"? ????? ??????: {e}")

if __name__ == "__main__":
    diagnose_database()